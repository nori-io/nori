// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import config "github.com/nori-io/nori-common/config"
import interfaces "github.com/nori-io/nori-common/interfaces"
import logrus "github.com/sirupsen/logrus"
import meta "github.com/nori-io/nori-common/meta"
import mock "github.com/stretchr/testify/mock"

// Registry is an autogenerated mock type for the Registry type
type Registry struct {
	mock.Mock
}

// Auth provides a mock function with given fields:
func (_m *Registry) Auth() interfaces.Auth {
	ret := _m.Called()

	var r0 interfaces.Auth
	if rf, ok := ret.Get(0).(func() interfaces.Auth); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interfaces.Auth)
		}
	}

	return r0
}

// Authorize provides a mock function with given fields:
func (_m *Registry) Authorize() interfaces.Authorize {
	ret := _m.Called()

	var r0 interfaces.Authorize
	if rf, ok := ret.Get(0).(func() interfaces.Authorize); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interfaces.Authorize)
		}
	}

	return r0
}

// Cache provides a mock function with given fields:
func (_m *Registry) Cache() interfaces.Cache {
	ret := _m.Called()

	var r0 interfaces.Cache
	if rf, ok := ret.Get(0).(func() interfaces.Cache); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interfaces.Cache)
		}
	}

	return r0
}

// Config provides a mock function with given fields:
func (_m *Registry) Config() config.Manager {
	ret := _m.Called()

	var r0 config.Manager
	if rf, ok := ret.Get(0).(func() config.Manager); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(config.Manager)
		}
	}

	return r0
}

// Http provides a mock function with given fields:
func (_m *Registry) Http() interfaces.Http {
	ret := _m.Called()

	var r0 interfaces.Http
	if rf, ok := ret.Get(0).(func() interfaces.Http); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interfaces.Http)
		}
	}

	return r0
}

// Logger provides a mock function with given fields: _a0
func (_m *Registry) Logger(_a0 meta.Meta) *logrus.Logger {
	ret := _m.Called(_a0)

	var r0 *logrus.Logger
	if rf, ok := ret.Get(0).(func(meta.Meta) *logrus.Logger); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*logrus.Logger)
		}
	}

	return r0
}

// Mail provides a mock function with given fields:
func (_m *Registry) Mail() interfaces.Mail {
	ret := _m.Called()

	var r0 interfaces.Mail
	if rf, ok := ret.Get(0).(func() interfaces.Mail); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interfaces.Mail)
		}
	}

	return r0
}

// PubSub provides a mock function with given fields:
func (_m *Registry) PubSub() interfaces.PubSub {
	ret := _m.Called()

	var r0 interfaces.PubSub
	if rf, ok := ret.Get(0).(func() interfaces.PubSub); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interfaces.PubSub)
		}
	}

	return r0
}

// Resolve provides a mock function with given fields: dep
func (_m *Registry) Resolve(dep meta.Dependency) interface{} {
	ret := _m.Called(dep)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(meta.Dependency) interface{}); ok {
		r0 = rf(dep)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// Session provides a mock function with given fields:
func (_m *Registry) Session() interfaces.Session {
	ret := _m.Called()

	var r0 interfaces.Session
	if rf, ok := ret.Get(0).(func() interfaces.Session); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interfaces.Session)
		}
	}

	return r0
}

// Sql provides a mock function with given fields:
func (_m *Registry) Sql() interfaces.SQL {
	ret := _m.Called()

	var r0 interfaces.SQL
	if rf, ok := ret.Get(0).(func() interfaces.SQL); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interfaces.SQL)
		}
	}

	return r0
}

// Templates provides a mock function with given fields:
func (_m *Registry) Templates() interfaces.Templates {
	ret := _m.Called()

	var r0 interfaces.Templates
	if rf, ok := ret.Get(0).(func() interfaces.Templates); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interfaces.Templates)
		}
	}

	return r0
}
