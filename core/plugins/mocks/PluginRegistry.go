// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import entities "github.com/secure2work/nori/core/entities"
import interfaces "github.com/secure2work/nori/core/plugins/interfaces"
import logrus "github.com/sirupsen/logrus"
import mock "github.com/stretchr/testify/mock"

// PluginRegistry is an autogenerated mock type for the PluginRegistry type
type PluginRegistry struct {
	mock.Mock
}

// Auth provides a mock function with given fields:
func (_m *PluginRegistry) Auth() interfaces.Auth {
	ret := _m.Called()

	var r0 interfaces.Auth
	if rf, ok := ret.Get(0).(func() interfaces.Auth); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interfaces.Auth)
		}
	}

	return r0
}

// Authorize provides a mock function with given fields:
func (_m *PluginRegistry) Authorize() interfaces.Authorize {
	ret := _m.Called()

	var r0 interfaces.Authorize
	if rf, ok := ret.Get(0).(func() interfaces.Authorize); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interfaces.Authorize)
		}
	}

	return r0
}

// Cache provides a mock function with given fields:
func (_m *PluginRegistry) Cache() interfaces.Cache {
	ret := _m.Called()

	var r0 interfaces.Cache
	if rf, ok := ret.Get(0).(func() interfaces.Cache); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interfaces.Cache)
		}
	}

	return r0
}

// Config provides a mock function with given fields:
func (_m *PluginRegistry) Config() interfaces.ConfigManager {
	ret := _m.Called()

	var r0 interfaces.ConfigManager
	if rf, ok := ret.Get(0).(func() interfaces.ConfigManager); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interfaces.ConfigManager)
		}
	}

	return r0
}

// Get provides a mock function with given fields: ns
func (_m *PluginRegistry) Get(ns string) interface{} {
	ret := _m.Called(ns)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(string) interface{}); ok {
		r0 = rf(ns)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// Http provides a mock function with given fields:
func (_m *PluginRegistry) Http() interfaces.Http {
	ret := _m.Called()

	var r0 interfaces.Http
	if rf, ok := ret.Get(0).(func() interfaces.Http); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interfaces.Http)
		}
	}

	return r0
}

// Logger provides a mock function with given fields: meta
func (_m *PluginRegistry) Logger(meta entities.PluginMeta) *logrus.Logger {
	ret := _m.Called(meta)

	var r0 *logrus.Logger
	if rf, ok := ret.Get(0).(func(entities.PluginMeta) *logrus.Logger); ok {
		r0 = rf(meta)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*logrus.Logger)
		}
	}

	return r0
}

// Mail provides a mock function with given fields:
func (_m *PluginRegistry) Mail() interfaces.Mail {
	ret := _m.Called()

	var r0 interfaces.Mail
	if rf, ok := ret.Get(0).(func() interfaces.Mail); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interfaces.Mail)
		}
	}

	return r0
}

// PubSub provides a mock function with given fields:
func (_m *PluginRegistry) PubSub() interfaces.PubSub {
	ret := _m.Called()

	var r0 interfaces.PubSub
	if rf, ok := ret.Get(0).(func() interfaces.PubSub); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interfaces.PubSub)
		}
	}

	return r0
}

// Session provides a mock function with given fields:
func (_m *PluginRegistry) Session() interfaces.Session {
	ret := _m.Called()

	var r0 interfaces.Session
	if rf, ok := ret.Get(0).(func() interfaces.Session); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interfaces.Session)
		}
	}

	return r0
}

// Sql provides a mock function with given fields:
func (_m *PluginRegistry) Sql() interfaces.SQL {
	ret := _m.Called()

	var r0 interfaces.SQL
	if rf, ok := ret.Get(0).(func() interfaces.SQL); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interfaces.SQL)
		}
	}

	return r0
}

// Templates provides a mock function with given fields:
func (_m *PluginRegistry) Templates() interfaces.Templates {
	ret := _m.Called()

	var r0 interfaces.Templates
	if rf, ok := ret.Get(0).(func() interfaces.Templates); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interfaces.Templates)
		}
	}

	return r0
}
